// vim:ts=4:sw=4:et:cin

#include "streamdeckkey.h"
#include <iostream>
#include <QBuffer>
#include <QPen>
#include <QPainter>
#include "streamdeckconnect.h"

StreamDeckKey::StreamDeckKey(
        StreamDeckConnect* owner,
        const QString& deckId_, int page_, int row_, int column_,
        QImage&& icon)
    : QObject(owner)
    , deckConnect(owner)
    , deckId(deckId_), page(page_), row(row_), column(column_)
    , image(std::move(icon))
{
}

StreamDeckKey_Switch::StreamDeckKey_Switch(
        StreamDeckConnect* owner,
        const QString& deckId_, int page_, int row_, int column_,
        QImage&& iconOff, QImage&& iconOn,
        bool defaultEn)
    : StreamDeckKey(owner, deckId_, page_, row_, column_, std::move(iconOff))
    , imageOn(std::move(iconOn))
    , en(defaultEn)
{
}

StreamDeckKey_Scene::StreamDeckKey_Scene(
        StreamDeckConnect* owner,
        const QString& deckId_, int page_, int row_, int column_,
        QImage&& iconOff, QImage&& iconOn,
        uint_fast8_t sceneId)
    : StreamDeckKey_Switch(owner, deckId_, page_, row_, column_, std::move(iconOff), std::move(iconOn)), scene(sceneId)
{
}

StreamDeckKey_Tally::StreamDeckKey_Tally(
        StreamDeckConnect* owner,
        const QString& deckId_, int page_, int row_, int column_,
        QImage&& iconOff, QImage&& iconOn, QImage&& iconPreview,
        int camId_, bool isActive_, bool isPreview_)
    : StreamDeckKey(owner, deckId_, page_, row_, column_, QImage())
    , camId(camId_), isActive(isActive_), isPreview(isPreview_)
    , imageD(std::move(iconOff)), imageE(std::move(iconOn)), imageP(std::move(iconPreview))
{
    //paintTextOnImage(imageD, QString::number(camId));
    //paintTextOnImage(imageE, QString::number(camId));
    //paintTextOnImage(imageP, QString::number(camId));
}

void StreamDeckKey::onKeyDown()
{
    emit keyDown();
}

void StreamDeckKey::onKeyUp()
{
    emit keyUp();
}

QString StreamDeckKey::image2dataUri(const QImage& image) /* [static] */
{
    // function body is generated by Gemini
    QByteArray byteArray;
    QBuffer buffer(&byteArray);
    buffer.open(QIODevice::WriteOnly);
    image.save(&buffer, "PNG"); 
    QString base64String = byteArray.toBase64();
    return "data:image/png;base64," + base64String; 
}

void StreamDeckKey::paintTextOnImage(QImage& image, const QString& str) /* [static] */
{
    // Create a QPainter object
    QPainter painter(&image);

    // Set the pen and font for the text
    painter.setPen(QPen(Qt::white));
    painter.setFont(QFont("Arial", 96));

    // Draw the text on the image
    painter.drawText(QRect(30,100,228,158), Qt::AlignCenter, str);
}

void StreamDeckKey::updateButton()
{
    deckConnect->sendRequest("setImage",
            QJsonObject{
                {"device", deckId},
                {"page", page},
                {"row", row},
                {"column", column},
                {"image", image2dataUri(image)}
            });
}

void StreamDeckKey_Switch::updateButton()
{
    if (en) {
        deckConnect->sendRequest("setImage",
                QJsonObject{
                    {"device", deckId},
                    {"page", page},
                    {"row", row},
                    {"column", column},
                    {"image", image2dataUri(imageOn)}
                });
    } else {
        StreamDeckKey::updateButton();
    }
}

void StreamDeckKey_Tally::updateButton()
{
    QImage copyImage(isActive? imageE : isPreview? imageP : imageD);
    if (camId >= 0) paintTextOnImage(copyImage, QString::number(camId));
    deckConnect->sendRequest("setImage",
            QJsonObject{
                {"device", deckId},
                {"page", page},
                {"row", row},
                {"column", column},
                {"image", image2dataUri(copyImage)}
            });
}

void StreamDeckKey_Switch::setEnable(bool en_)
{
    en = en_;
    updateButton();
}

void StreamDeckKey_Tally::setPreview(bool en)
{
    isPreview = en;
    updateButton();
}

void StreamDeckKey_Tally::setActive(bool en)
{
    isActive = en;
    updateButton();
}

void StreamDeckKey_Tally::setCamId(int camId_, bool isActive_, bool isPreview_)
{
    camId = camId_;
    isActive = isActive_;
    isPreview = isPreview_;
    updateButton();
}

